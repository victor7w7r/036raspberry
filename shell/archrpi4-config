#!/usr/bin/env bash

if [ "$(id -u)" -ne 0 ]; then
	echo "ERROR: You need to be root. / Necesitas ser superusuario."
	exit 1
fi

rm /tmp/localestemp.sh* 2> /dev/null
rm /tmp/hosttemp.sh* 2> /dev/null
rm /tmp/graphicaltemp.sh* 2> /dev/null
	
LOCALESTEMP=/tmp/localestemp.sh.$$
HOSTTEMP=/tmp/hosttemp.sh.$$
GRAPHICALTEMP=/tmp/graphicaltemp.sh.$$

SUDOUSER=""; LANGUAGE=0

function cleanup { rm $LOCALESTEMP; $HOSTTEMP; $GRAPHICALTEMP exit; }

trap cleanup; SIGHUP SIGINT SIGTERM

function core { clear; language; cover; sleep 1s; verify; packages; hostnamer; localer
				newuser; graphical; aur; swapper; ohmyzsh; software; finisher;}

function printer() {

    local RED="\e[31m"; local GREEN="\e[32m"; local YELLOW="\e[33m"
    local RESET="\e[0m"; local MESSAGE_TYPE=""; local MESSAGE=""
    MESSAGE_TYPE="${1}"; POSITION="${2}"

	local DICTIONARY_ENG=(
		"Your Operating System is not GNU/Linux, exiting"
		"This script is only intended to run on aarch64 Devices."
		"This script is only intended to run on Raspberry Pi 4 Devices."
		"Arch Linux pacman is not available in this system, this system isn't Arch Linux?"
		"This PC doesn't have internet connection, please check"
		"Populating Arch ARM Keys.."
		"Updating Arch ARM Repositories..."
		"lsb_release is not available in this system, installing"
		"Your Operating System is not Arch Linux, exiting"
		"dialog is not available in this system, installing"
		"All dependencies is ok!"
		"=============== SYSTEM UPDATE AND INSTALL CORE PACKAGES =============== \n"
		"=============== ROOT PASSWORD FOR YOUR SYSTEM =============== \n"
		"=============== ADD A USER TO A SUDO GROUP =============== \n"
		"=============== BLUETOOTH AND SOUND =============== \n" 
		"=============== AUR (YAY ASKS YOU YOUR PASSWORD, PAY ATTENTION) ===============  \n" 
		"We create a script called omz.sh in your home directory, after reboot, use chmod +x at omz.sh"
		"We create a script called software.sh in your home directory, after reboot, use chmod +x at software.sh"
		"Please reboot your rpi4 to make changes"
	)

	local DICTIONARY_ESP=(
		"Este sistema no es GNU/Linux, saliendo"
		"Este script sólo se ejecuta en procesadores de aarch64"
		"Este script sólo se ejecuta en Raspberry Pi 4"
		"Arch Linux pacman no está disponible, ¿Acaso esto no es Arch Linux?"
		"No tienes conexión a internet, por favor revisa e inténtalo de nuevo"
		"Llenando llaves de Arch ARM..."
		"Actualizando repositorios de Arch..."
		"lsb_release no está disponible, instalando"
		"Tu sistema operativo no es Arch Linux, saliendo"
		"dialog is no está disponible, instalando"
		"¡Todo ok!"
		"=============== ACTUALIZACIÓN DEL SISTEMA E INSTALAR PAQUETES BASE =============== \n" 
		"=============== CONTRASEÑA DE ROOT PARA EL SISTEMA =============== \n" 
		"=============== AGREGAR UN USUARIO DE SUDO =============== \n" 
		"=============== BLUETOOTH Y SONIDO =============== \n"
		"=============== AUR (YAY PREGUNTA POR TU CONTRASEÑA, ESTATE ATENTO) ===============  \n"
		"Hemos creado un script llamado omz.sh en tu carpeta de home, después de reiniciar, usa chmod +x omz.sh" 
		"Hemos creado un script llamado software.sh en tu carpeta de home, después de reiniciar, usa chmod +x software.sh"
		"Por favor reinicia tu rpi4 para realizar los cambios"
	)

	if [ "$LANGUAGE" -eq 1 ]; then
		case ${MESSAGE_TYPE} in
			print) echo -e "${DICTIONARY_ENG[$POSITION]}";;
			info) echo -e "[${GREEN}+${RESET}] INFO: ${DICTIONARY_ENG[$POSITION]}";; 
			warn) echo -e "[${YELLOW}*${RESET}] WARNING: ${DICTIONARY_ENG[$POSITION]}";; 
			error) echo -e "[${RED}!${RESET}] ERROR: ${DICTIONARY_ENG[$POSITION]}";;
			*) echo -e "[?] UNKNOWN: ${MESSAGE}";;
		esac
	else 
		case ${MESSAGE_TYPE} in
			print) echo -e "${DICTIONARY_ESP[$POSITION]}";;
			info) echo -e "[${GREEN}+${RESET}] INFO: ${DICTIONARY_ESP[$POSITION]}";; 
			warn) echo -e "[${YELLOW}*${RESET}] ADVERTENCIA: ${DICTIONARY_ESP[$POSITION]}";; 
			error) echo -e "[${RED}!${RESET}] ERROR: ${DICTIONARY_ESP[$POSITION]}";;
			*) echo -e "[?] UNKNOWN: ${MESSAGE}";;
		esac
	fi
    
}

function reader() {

	POSITION="${1}"

	local DICTIONARY_ENG=(
		"Press Enter to continue..."
		"Please write your hostname (ex: A036-rpi4)"
		"America/Guayaquil is the timezone by default, if you want to change, here is the command\n\n \
		ln -sf /usr/share/zoneinfo/REGION/CITY /etc/localtime"
		"Choose your locale, if you want to change to other locales, check the README of the Github of this project"
		"Write your new user: "
		"Graphical Environment"
		"Choose a GUI, these are the common used, this script recommends XFCE"
		"More Sofware!!"
		"This script has a little pack of software, Do you like it?"
		"READY!!!, Your RPI4 is succesfully configured, if you have errors, please report at 036raspberry in GitHub"
	)

	local DICTIONARY_ESP=(
		"Presione Enter para continuar..."
		"Por favor escriba su hostname (ej: A036-rpi4)" 
		"America/Guayaquil es el timezone por defecto, si quieres cambiarlo por algún otro, aquí está la orden\n\n \
		ln -sf /usr/share/zoneinfo/REGION/CITY /etc/localtime"
		"Elige tu Locale, si quieres cambiar a otros, revisa el README dentro del GitHub de este proyecto"
		"Escribe tu nuevo usuario: "
		"Entorno Gráfico"
		"Selecciona un GUI, estos son los más usados, Este script recomienda XFCE"
		"Más Sofware!!"
		"Este script tiene un pequeño pack de software, ¿Te gusta?"
		"LISTO!!!, Tu RPI4 fue configurado exitosamente, si tienes errores, repórtalo a 036raspberry"
	)

	if [ "$LANGUAGE" -eq 1 ]; then
		echo "${DICTIONARY_ENG[$POSITION]}"
	else 
		echo "${DICTIONARY_ESP[$POSITION]}"
	fi

}

function commandverify() {
	if ! command -v "$1" &> /dev/null; then return 1; else return 0; fi
}

function language {
		
	echo "Bienvenido / Welcome"
	echo "Please, choose your language / Por favor selecciona tu idioma"
	echo "1) English"; echo "2) Espanol"
	read -n 1 -r OPTION
	case $OPTION in
		1) LANGUAGE=1;; 2) LANGUAGE=2;; *) exit 1;;
	esac
}

function cover {
	
	clear
	echo '                                     `"~>v??*^;rikD&MNBQku*;`                                           '
	echo '                                `!{wQNWWWWWWWWWWWWWWWNWWWWWWNdi^`                                       '
	echo '                              .v9NWWWWNRFmWWWWWWWWWWWWga?vs0pNWWWMw!                                    '
	echo '                            !9WWWWWWU>`>&WWWWWWUH!_JNWWWWWQz  ^EWWWWg|                                  '
	echo '                           _SWWWWWNe: /RWWWWWWNNHBRuyix&WWWWWg2?-"VNWWW6_                               '
	echo '                         "kWWWWWNz. .zNWWWWWWw=, ^NsLQNW**MWWWW&WQJuNWWWNr.                             '
	echo '                       .FNWWWWNu. rL&WWWWWWg!!*;^Jo!*BN0aFx)>|!;;;;;!~\r)xFwaao?|,                      '
	echo '                     .sNWWWWMi` -,#WWWWWWNi"` Siwu UWv  .;^|^;`               .!*lUSF*;                 '
	echo '                    )BWWWWWo.   9NWWWWWW0; ;PvLc*aU&^ |L=-``.;>*=                   ;)wmkL_             '
	echo '                  _QWWWWWq"   .aWWWWWWWs`  rF<>\^gQ, /i   ,;;.  !2                      ,*k0F\`         '
	echo '                 *NWWWWNv   ,/&WWWWWWNr "!SL92l)BU.  ^x   x. L,  I_                        `>P&F;       '
	echo '               `2WWWWWg;    !BWWWWWWD"   .s;!\xNa     /L,   !L`  P,                           .?&gr     '
	echo '              ,QWWWWWS`  >;LWWWWWWWk`_;!\u|  ^Ml        ;~!^,  `iv                              `?Ng^   '
	echo '             ^BWWWWWi   *i7NWWWWWWc "a;;?ii"~NV             `;?},                                 ,9WF  '
	echo '            >WWWWWB!  ` ;8WWWWWWM=  r>`;F/2wNc          .;||!,                                      oW#.'
	echo '           ?WWWWW#"  `2;7NWWWWW&_ =_=u%ir`>Wi                                                        PW6'
	echo '          rWWWWWc   `||>WWWWWWU.  r^?7;!v*W)                                                         ,WW|'
	echo '         ^NWWWB!  ! \jrmWWWWWw  `vL.k*\vkW$>rr*r;`        ;rL{7)>!`                                   mWF'
	echo '        .BWWW$,   ,u. PWWWWW) ,r`)|)!__LWv     `;L"     |s>:```._|JuL                                 qWE'
	echo '        uWWWH` .vi"Fo*WWWWN>   ^v  r*`>W}                                                             &Ws '
	echo '       ;WWWP`  `=*ox_pWWWB; ^)i`9xr,#7W*            .     ,\*`                                       |WW! '
	echo '       SWWD` >LLr^_y*NWWQ"  ,<?P~|iF0W}            ~;   v_ `o;                                      .0WU'
	echo '      ^WW0,.!F2xULFi5WW0` >7vr!!z_`*Wv             `|;;^!,~!`                                      .8W8.'
	echo '      dWN;`>JyrkIr`!NWN! ,uFia!9?*2WI                                                             ;QWD.'
	echo '     =WW7`_S)~Fxv| xWWi ;}drqa=;=uWRNmL,                                                         rWWt`  '
	echo '     DWP`;LiL;}c*rsWW&`,Po_e7L/ =Nc `>oD$aaw%ouic7)*r>=|^^~!;;;;;;;;;;;;;~^\>rvL{JctxiiiiuusoF2kgBS/  '
	echo '    ;WN\\Uy>*rF.,pWWWr-;?J"vov^^Nu         `.,"_;!~^\=>r*v?LL{}Jjjjjjj}}7?vr>\^!;____-""",,,..``    '
	echo '    iW?_**>^;>"~&EeWg=|liv*s!~?NL'
	echo '    wWc*$>*~~L6Ni QW! \Uursx >WJ'
	echo '    2M)o*_F "R0; .Wd~U7,``;*iN>'
	echo '    xWe?vI7cMu`  ,W&>xssr~=PB|'
	echo '    "W% ,cBZ_    `M2l\/i,,QQ,'
	echo '     |U$di_       UBu>i)yBy`'
	echo '                  ^Wx,rDR!'
	echo '                   \ZUl^'
	echo '.oPYo. .oPYo. .pPYo.   .oPYo.                       o   o                 .oPYo.   o              8  o                '
	echo '8  .o8     `8 8        8    8                       8                     8        8              8                   '
	echo '8 .P`8   .oP` 8oPYo.   8      oPYo. .oPYo. .oPYo.  o8P o8 o    o .oPYo.   `Yooo.  o8P o    o .oPYo8 o8 .oPYo. .oPYo.  '
	echo '8.d` 8    `b. 8`  `8   8      8  `` 8oooo8 .oooo8   8   8 Y.  .P 8oooo8       `8   8  8    8 8    8  8 8    8 Yb..   '
	echo '8o`  8     :8 8.  .P   8    8 8     8.     8    8   8   8 `b..d` 8.            8   8  8    8 8    8  8 8    8   `Yb. '
	echo '`YooP` `YooP` `YooP`   `YooP` 8     `Yooo` `YooP8   8   8  `YP`  `Yooo`   `YooP`   8  `YooP` `YooP`  8 `YooP` `YooP. '
	echo ':.....::.....::.....::::.....:..:::::.....::.....:::..::..::...:::.....::::.....:::..::.....::.....::..:.....::.....:'
	echo ':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::'
	echo ':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::'
}

function verify {

    ARCH=$(uname -m); OPERATING=$(uname -o)
	SELECTOR=""
	PI="$(cat /sys/firmware/devicetree/base/model)"

	if [ "$OPERATING" != "GNU/Linux" ]; then
		clear; printer error 0; exit 1
	fi

    if [ "$ARCH" != "aarch64" ]; then
		clear; printer error 1; exit 1
    fi

    if [[ "$PI" =~ ^Raspberry[[:space:]]Pi[[:space:]]4.* ]]; then
        echo "ready" &> /dev/null
	else clear; printer error 2; exit 1; fi

    SELECTOR="pacman"; commandverify "$SELECTOR"; local res=$?

	if [ $res -eq 1 ]; then
		clear; printer error 3; exit 1
	fi

    PING=$(ping -c 1 8.8.8.8 2>&1) 

    if [[ "$PING" =~ unreachable* ]]; then
		clear; printer error 4; exit 1
	fi

	printer print 5; pacman-key --init &> /dev/null
	pacman-key --populate archlinuxarm  &> /dev/null
    printer print 6; pacman -Sy &> /dev/null

    SELECTOR="lsb_release"; commandverify "$SELECTOR"; local res=$?

	if [ $res -eq 1 ]; then
		printer print 7
		pacman -S lsb-release --noconfirm &> /dev/null
	fi

	IS_ARCH=$(lsb_release -is)

	if [ "$IS_ARCH" != "Arch" ]; then
		clear; printer error 8; exit 1
	fi

	SELECTOR="dialog"; commandverify "$SELECTOR"; local res=$?

	if [ $res -eq 1 ]; then
		printer print 9
		pacman -S dialog --noconfirm &> /dev/null
	fi

	pacman -S ncurses --noconfirm &> /dev/null

	printer print 10; START=$(date +%s); CHARS="/-\|"

	while [[ $(($(date +%s) - START)) -lt 2 ]]; do
		for (( i=0; i<${#CHARS}; i++ )); do
			sleep 0.08; echo -en "${CHARS:$i:1}" "\r"
		done
	done

}

function packages {

	clear; RES1=$(reader 0)
	printer print 11
	systemctl enable sshd &> /dev/null
	systemctl start sshd &> /dev/null
	pacman -Syyu --noconfirm 
	pacman -S sudo git wget rsync networkmanager neofetch \
	screen unrar p7zip vim zsh python-pip --noconfirm 

	echo -e "=============== OK =============== \n" 
	read -r -p "$RES1"

	clear; printer print 12; passwd

	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "$RES1"

}

function hostnamer {
	
	RES2=$(reader 1); clear
	dialog --title "Hostname" \
    --backtitle "036 Creative Studios" \
    --inputbox "$RES2" 8 80 2>"$HOSTTEMP"

    RESPONSE=$?; DATA=$(<$HOSTTEMP)

    case $RESPONSE in
    0) 
		echo "${DATA}" > /etc/hostname
		echo "127.0.1.1        ${DATA}" >> /etc/hosts
		return;;
    1) 
        clear; exit 0; return;;
    255) 
        clear; exit 0; return;;
    esac
}

function localer {

	RES3=$(reader 2); RES4=$(reader 3); clear
	dialog --msgbox "$RES3" 9 50

	ln -sf /usr/share/zoneinfo/America/Guayaquil /etc/localtime
	hwclock --systohc

	dialog --clear --backtitle "036 Creative Studios" \
		--title "Locale" \
		--menu "$RES4" 12 50 4 \
		Spanish "es_ES" \
		English "en_US" 2>"${LOCALESTEMP}"
	menuitem=$(<"${LOCALESTEMP}")
	case $menuitem in
		Spanish) 
			clear
			sed -i 's/^#es_ES.UTF-8 UTF-8/es_ES.UTF-8 UTF-8/' /etc/locale.gen &> /dev/null
			locale-gen
			echo 'LANG="es_ES.UTF-8"' > /etc/locale.conf
			echo 'LC_TIME="es_ES.UTF-8"' >> /etc/locale.conf
			echo 'LANGUAGE="es_EC:es_ES:es"' >> /etc/locale.conf
			return;;
		English) 
			clear
			sed -i 's/^#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen &> /dev/null
			locale-gen
			echo 'LANG="en_US.UTF-8"' > /etc/locale.conf
			echo 'LC_TIME="en_US.UTF-8"' >> /etc/locale.conf
			echo 'LANGUAGE="es_US:en"' >> /etc/locale.conf
			return;;
		*) clear; exit 0;;
	esac
}

function newuser {

	clear; printer print 13
	RES1=$(reader 0); RES5=$(reader 4)
	read -r -p "$RES5" SUDOUSER
	useradd --create-home "$SUDOUSER"
	passwd "$SUDOUSER"
	usermod -aG wheel,storage,power "$SUDOUSER"
	userdel alarm
	sed -i 's/^#.*%wheel ALL=(ALL:ALL) ALL$/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers &> /dev/null
	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "$RES1"
}

function graphical {

	clear; RES1=$(reader 0); RES6=$(reader 5); RES7=$(reader 6)
	dialog --clear --title "$RES6" \
	--backtitle "036 Creative Studios" \
	--menu "$RES7" 15 50 4 \
			XFCE "Xfce Desktop Environment" \
			GNOME "GNOME Desktop Environment" \
			KDE "KDE Desktop Environment" \
			XORG "Minimal xorg Desktop" \
			NOGUI "No GUI" 2>"${GRAPHICALTEMP}"
	menuitem=$(<"${GRAPHICALTEMP}")
	case $menuitem in
		XFCE) 
			clear
			echo -e "=============== XFCE =============== \n" 
			pacman -S xorg-server xf86-video-fbdev xorg-xinit --noconfirm
			pacman -S xfce4 gdm xfce4-goodies ttf-ubuntu-font-family gtk-engines gtk-engine-murrine \
				gnome-themes-standard xdg-user-dirs ttf-dejavu gvfs xfce4-notifyd network-manager-applet volumeicon --noconfirm
			systemctl enable gdm
			touch /HOME/"$SUDOUSER"/.xinitrc
			echo "export XAUTHORITY=${HOME}/.Xauthority" > /HOME/"$SUDOUSER"/.xinitrc
			echo "exec dbus-run-session -- startxfce4" >> /HOME/"$SUDOUSER"/.xinitrc	
			echo " "
			echo -e "=============== OK =============== \n" 
			read -r -p "$RES1"
			return;;
		GNOME) 
			clear
			echo -e "=============== GNOME =============== \n" 
			pacman -S xorg-server xf86-video-fbdev xorg-xinit --noconfirm
			pacman -S gnome gdm gnome-themes-standard network-manager-applet --noconfirm
			systemctl enable gdm
			echo " "
			echo -e "=============== OK =============== \n" 
			read -r -p "$RES1"
			return;;
		KDE) 
			clear
			echo -e "=============== KDE =============== \n" 
			pacman -S xorg-server xf86-video-fbdev xorg-xinit --noconfirm
			pacman -S plasma plasma-wayland-session kde-applications network-manager-applet \
				network-manager-applet volumeicon --noconfirm
			systemctl enable sddm.service
			echo " "
			echo -e "=============== OK =============== \n" 
			read -r -p "$RES1"
			return;;
		XORG) 
			clear
			echo -e "=============== XORG ONLY =============== \n" 
			pacman -S xorg-server xf86-video-fbdev xorg-xinit --noconfirm

			echo " "
			echo -e "=============== OK =============== \n" 
			read -r -p "$RES1"
			return;;
		NOGUI) 
			return;;
		*) clear; exit 0;;
	esac

	clear; printer print 14
	pacman -S alsa-utils alsa-firmware alsa-lib alsa-plugins pulseaudio-alsa \
		pulseaudio-bluetooth bluez-utils libmm-glib modemmanager blueman --noconfirm
	sudo systemctl enable ModemManager
	sudo systemctl enable bluetooth
	sudo systemctl start ModemManager
	sudo systemctl start bluetooth

	echo "enable_uart=1" > /boot/config.txt
	echo "dtparam=audio=on" >> /boot/config.txt
	echo "hdmi_drive=2" >> /boot/config.txt
	echo "audio_pwm_mode=2" >> /boot/config.txt
	echo "disable_overscan=1" >> /boot/config.txt
	echo "gpu_mem=64" >> /boot/config.txt
	echo "cma=512" >> /boot/config.txt
	echo "dtoverlay=vc4-fkms-v3d" >> /boot/config.txt
	echo "max_framebuffers=2" >> /boot/config.txt

	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "$RES1"

}

function aur {

	clear; RES1=$(reader 0); printer print 15
	pacman -S --needed base-devel fakeroot packer --noconfirm
	sudo -u "$SUDOUSER" bash -c 'cd; git clone https://aur.archlinux.org/yay-bin.git'
	sudo -u "$SUDOUSER" bash -c 'cd; cd yay-bin; makepkg -si'
	sudo -u "$SUDOUSER" bash -c 'cd; rm -rf yay-bin'
	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "$RES1"

}

function swapper {

	clear; RES1=$(reader 0)
	echo -e "=============== SWAPPING =============== \n" 
	sudo -u "$SUDOUSER" bash -c 'cd; git clone https://aur.archlinux.org/zramswap.git'
	sudo -u "$SUDOUSER" bash -c 'cd; cd zramswap; makepkg -si'
	sudo -u "$SUDOUSER" bash -c 'cd; rm -rf zramswap'
	sudo systemctl enable zramswap.service
	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "$RES1"
}

function ohmyzsh {

	clear
	echo -e "=============== OMZ =============== \n" 

	touch /home/"$SUDOUSER"/omz.sh
	echo '#!/bin/bash' > /home/"$SUDOUSER"/omz.sh
	echo 'sh -c "$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"' >> /home/"$SUDOUSER"/omz.sh
	echo 'sed -i -e "s/ZSH_THEME=.*/ZSH_THEME=\"pmcgee\"/" .zshrc' >> /home/"$SUDOUSER"/omz.sh
	echo 'sed -i -e "/^source $ZSH.*/i ZSH_DISABLE_COMPFIX=true" .zshrc' >> /home/"$SUDOUSER"/omz.sh
	echo 'git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting' >> /home/"$SUDOUSER"/omz.sh
	echo 'git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions' >> /home/"$SUDOUSER"/omz.sh
	echo 'sed -i -e "s/plugins=(.*/plugins=(git zsh-syntax-highlighting zsh-autosuggestions)/" .zshrc' >> /home/"$SUDOUSER"/omz.sh
	chown "$SUDOUSER" /home/"$SUDOUSER"/omz.sh
	chmod +x /home/"$SUDOUSER"/omz.sh

	echo '#!/bin/bash' > /root/omz.sh
	echo 'sh -c "$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"' >> /root/omz.sh
	echo 'sed -i -e "s/ZSH_THEME=.*/ZSH_THEME=\"pmcgee\"/" .zshrc' >> /root/omz.sh
	echo 'sed -i -e "/^source $ZSH.*/i ZSH_DISABLE_COMPFIX=true" .zshrc' >> /root/omz.sh
	echo 'git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting' >> /root/omz.sh
	echo 'git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions' >> /root/omz.sh
	echo 'sed -i -e "s/plugins=(.*/plugins=(git zsh-syntax-highlighting zsh-autosuggestions)/" .zshrc' >> /root/omz.sh
	chmod +x /root/omz.sh

	printer print 16

	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "$RES1"

}

function software {

	RES1=$(reader 0); RES8=$(reader 7); RES9=$(reader 8)
	systemctl mask lvm2-monitor

	dialog --title "$RES8" --backtitle "036 Creative Studios" \
	--yesno "$RES9\n \
		-> baobab \n \
		-> ntfs-3g \n \
		-> exfatprogs \n \
		-> exfat-utils \n \
		-> xrdp \n \
		-> xarchiver \n \
		-> xorgxrdp \n \
		-> visual-studio-code \n \
		-> rpi-eeprom \n \
		-> rpi-imager \n \
		-> box64 \n \
		-> numix-gtk-theme-git\n \
		-> numix-icon-theme \n \
		-> preload " 26 65

	clear; response=$?

	if [ $response -eq 0 ]; then
	
		clear
		echo -e "=============== SOFTWARE =============== \n" 
		touch /home/"$SUDOUSER"/software.sh
		echo allowed_users=anybody > /etc/X11/Xwrapper.config
		echo '!#/bin/bash' > /home/"$SUDOUSER"/software.sh
		echo 'yay -S baobab ntfs-3g exfatprogs exfat-utils \' >> /home/"$SUDOUSER"/software.sh
		echo 'xarchiver gparted xrdp \' >> /home/"$SUDOUSER"/software.sh
		echo 'xorgxrdp pi-bluetooth visual-studio-code-bin preload \' >> /home/"$SUDOUSER"/software.sh
		echo 'rpi-eeprom rpi-imager box64 \' >> /home/"$SUDOUSER"/software.sh
		echo 'libdbusmenu-glib libdbusmenu-gtk3 appmenu-gtk-module numix-gtk-theme \' >> /home/"$SUDOUSER"/software.sh
		echo 'numix-icon-theme-git numix-circle-icon-theme-git' >> /home/"$SUDOUSER"/software.sh

		echo 'systemctl enable xrdp' >> /home/"$SUDOUSER"/software.sh
		echo 'systemctl enable xrdp-sesman' >> /home/"$SUDOUSER"/software.sh
		echo 'systemctl enable preload' >> /home/"$SUDOUSER"/software.sh

		chown "$SUDOUSER" /home/"$SUDOUSER"/software.sh
		chmod +x /home/"$SUDOUSER"/software.sh
		printer print 17

		echo " "
		echo -e "=============== OK =============== \n" 
		read -r -p "$RES1"

	elif [ $response -eq 1 ]; then clear; return
	else clear; exit 0; fi
}

function finisher {

	clear; RES10=$(reader 9)
	dialog --msgbox "$RES10" 7 50
	clear; printer print 18; exit 0
}

core

[ -f $LOCALESTEMP ] && rm $LOCALESTEMP
[ -f $HOSTTEMP ] && rm $HOSTTEMP
[ -f $GRAPHICALTEMP ] && rm $GRAPHICALTEMP